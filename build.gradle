buildscript {
    ext {
        kotlin_version = "1.7.0"
        viewmodel_version = "2.5.1"
        navigation_compose_version = "2.5.0"
        compose_version = "1.2.1"
        room_version = "2.5.0-alpha03"
        smack_version = "4.4.6"
        work_version = "2.7.1"
    }
    dependencies {
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.43.2'
        classpath 'com.google.gms:google-services:4.3.13'
    }
}// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.3.1' apply false
    id 'com.android.library' version '7.3.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.7.10' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors (disabled by default)
        allWarningsAsErrors = project.hasProperty("warningsAsErrors") ? project.warningsAsErrors : false

        freeCompilerArgs += '-opt-in=kotlin.RequiresOptIn'

        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi'
        freeCompilerArgs += '-opt-in=kotlinx.coroutines.FlowPreview'
        freeCompilerArgs += '-opt-in=kotlin.Experimental'

        // Set JVM target to 17
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}